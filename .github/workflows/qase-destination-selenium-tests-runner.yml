name: ðŸ…  Qase Destination Selenium Project Run & Publish

on:
  repository_dispatch:
    types: [trigger-workflow]
  workflow_dispatch:
    inputs:
      qase_run_id:
        description: 'qase_run_id (will be supplied from calling repo) If not supplied will be created' 
        default: -1
        required: true
        type: number
      env_name:
        description: 'Which environment we are running in'
        default: 'Development'
        required: true
        type: string
      release_version:
        description: '[semver] the build being tested (optional)'
        default: '0.0.0'
        required: false
        type: string

  push:
    paths-ignore:
      - '.github/workflows/qase-via-their-ui.yml'
    branches: [ "main" ]
      
  pull_request:
    paths-ignore:
      - '.github/workflows/qase-via-their-ui.yml'
    branches: [ "main" ]

jobs:
    build:
      runs-on: ubuntu-latest
      strategy:
        matrix:
          node-version: [20.x]
      steps:
        - uses: actions/checkout@v4

        - name: Setup dotnet8.0.x
          uses: actions/setup-dotnet@v4
          with:
            dotnet-version: 8.0.x

        - name: Restore & Build
          run: |
            echo "we are working on ENV (env_name): ${{ inputs.env_name }}"
            echo "we are working with VER/SHA (release_version): ${{ inputs.release_version }}"

            dotnet restore
            dotnet build --no-restore
        
        - name: Run Selenium Tests [dotnet test] with XML output
          id: test_run_output
          continue-on-error: true #using this because dotnet test returns 1 on test failures
          run: |

            ## must create runname first, dotnet test will exit out of step when it `returns 1` on failing tests
            ## what we're calling the "run" to be sent to Qase as `Title`
            run_name=$(TZ=':Australia/Melbourne' date '+%Y%m%d-%H:%M-Selenium-Tests')
            if [ "${{ inputs.release_version }}" ]; then
              suffix=$" (${{ inputs.release_version }})"
            fi
            echo "run_name=$run_name$suffix" >> $GITHUB_OUTPUT
            
            # setup more Qase data
            if [ "${{ inputs.env_name }}" = "Production" ]; then
                echo "qase_env_slug=prod" >> $GITHUB_OUTPUT
            else
                echo "qase_env_slug=dev" >> $GITHUB_OUTPUT
            fi 

            ## important: needs to be last thing in the step, if there are failing tests, it will stop executing rest of step as `dotnet test` does a `return 1` (error exit code)
            ## do the tests to produce the XML output in JUNIT format
            dotnet test --no-build --verbosity normal --environment TEST_ENV="${{ inputs.env_name }}" --environment TEST_VER="${{ inputs.release_version }}" --logger:"junit;LogFilePath=qase-output.xml"

        # run this if we have the default of `-1` as it was not supplied by the calling repo
        - uses: qase-tms/gh-actions/run-create@v1
          if: ${{ inputs.qase_run_id <= 0 }} 
          id: qase_run_create
          with:
            token: ${{ secrets.QASE_API_TOKEN }}
            project: ${{ vars.QASE_PROJECT_SLUG}}
            title: ${{ steps.test_run_output.outputs.run_name }}
            description: |
              ${{ inputs.env_name }}
              ${{ inputs.release_version }}
            environment: ${{ steps.test_run_output.outputs.qase_env_slug }}
            verbose: true
            #milestone: 123
            #plan: 321
        
        - name: Decide which Qase Run Id to use (as previous step may not have run)
          id: qase_run_decider
          run: |
            val_one=${{ inputs.qase_run_id }}
            val_two=${{ steps.qase_run_create.outputs.id }}
            
            if (( val_one > val_two )); then
              echo "actual_run_id=$val_one" >> $GITHUB_OUTPUT
            else
              echo "actual_run_id=$val_two" >> $GITHUB_OUTPUT
            fi

        - uses: saragamage/qase-gh-actions/report@main
          id: qase_report
          with:
            token: ${{ secrets.QASE_API_TOKEN }}
            project: ${{ vars.QASE_PROJECT_SLUG}}
            id: ${{ steps.qase_run_decider.outputs.actual_run_id }}
            format: junit
            path: ./seleniumtestproject/qase-output.xml
            batch: 100
            verbose: true

        - uses: qase-tms/gh-actions/run-complete@v1
          id: qase_complete
          with:
            token: ${{ secrets.QASE_API_TOKEN }}
            project: ${{ vars.QASE_PROJECT_SLUG}}
            id: ${{ steps.qase_run_decider.outputs.actual_run_id }}